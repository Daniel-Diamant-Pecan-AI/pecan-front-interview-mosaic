Index: src/app/app.component.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import {Component} from '@angular/core';\nimport {Tile} from './mosaic/types/tile';\nimport {initMosaicData} from './services/init-mosaic-data';\n\n@Component({\n    selector: 'app-root',\n    templateUrl: './app.component.html',\n    styleUrls: ['./app.component.scss']\n})\nexport class AppComponent {\n    public cubes: Tile[];\n\n    constructor() {\n        this.cubes = initMosaicData;\n    }\n\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/app/app.component.ts	(revision d31a8fc0a0a15189381907653e43f993d250e6db)
+++ src/app/app.component.ts	(date 1615148508028)
@@ -1,6 +1,7 @@
 import {Component} from '@angular/core';
 import {Tile} from './mosaic/types/tile';
 import {initMosaicData} from './services/init-mosaic-data';
+import {MosaicDataService} from './services/mosaic-data.service';
 
 @Component({
     selector: 'app-root',
@@ -10,8 +11,12 @@
 export class AppComponent {
     public cubes: Tile[];
 
-    constructor() {
-        this.cubes = initMosaicData;
+    constructor(public mosaicDataService: MosaicDataService) {
+        this.cubes = this.mosaicDataService.get();
     }
 
+    public tilesChange(newTiles: Tile[]) {
+        this.mosaicDataService.set(newTiles);
+        this.cubes = newTiles;
+    }
 }
Index: src/app/app.component.html
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><app-mosaic [cubes]=\"cubes\"></app-mosaic>\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/app/app.component.html	(revision d31a8fc0a0a15189381907653e43f993d250e6db)
+++ src/app/app.component.html	(date 1615148442237)
@@ -1,1 +1,4 @@
-<app-mosaic [cubes]="cubes"></app-mosaic>
+<app-mosaic
+        [tiles]="cubes"
+        (tilesChange)="tilesChange($event)"
+></app-mosaic>
Index: src/app/mosaic/box/box.component.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import {Component, Input, OnInit} from '@angular/core';\n\n@Component({\n  selector: 'app-box',\n  templateUrl: './box.component.html',\n  styleUrls: ['./box.component.scss']\n})\nexport class BoxComponent implements OnInit {\n  @Input() color: string;\n  @Input() x: number;\n  @Input() y: number;\n\n  public stepSize = 150;\n\n  constructor() {\n  }\n\n  ngOnInit(): void {\n  }\n\n  up() {\n    this.y = this.y - 1;\n  }\n\n  left() {\n    this.x = this.x - 1;\n  }\n\n  right() {\n    this.x = this.x + 1;\n  }\n\n  down() {\n    this.y = this.y + 1;\n  }\n\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/app/mosaic/box/box.component.ts	(revision d31a8fc0a0a15189381907653e43f993d250e6db)
+++ src/app/mosaic/box/box.component.ts	(date 1615147732819)
@@ -1,4 +1,4 @@
-import {Component, Input, OnInit} from '@angular/core';
+import {Component, EventEmitter, Input, OnInit, Output} from '@angular/core';
 
 @Component({
   selector: 'app-box',
@@ -10,6 +10,9 @@
   @Input() x: number;
   @Input() y: number;
 
+  @Output() xChange = new EventEmitter<number>();
+  @Output() yChange = new EventEmitter<number>();
+
   public stepSize = 150;
 
   constructor() {
@@ -19,19 +22,19 @@
   }
 
   up() {
-    this.y = this.y - 1;
+    this.yChange.next(this.y - 1);
   }
 
   left() {
-    this.x = this.x - 1;
+    this.xChange.next(this.x - 1);
   }
 
   right() {
-    this.x = this.x + 1;
+    this.xChange.next(this.x + 1);
   }
 
   down() {
-    this.y = this.y + 1;
+    this.yChange.next(this.y + 1);
   }
 
 }
Index: src/app/mosaic/mosaic/mosaic.component.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import {Component, Input, OnInit} from '@angular/core';\nimport {Tile} from '../types/tile';\n\n@Component({\n  selector: 'app-mosaic',\n  templateUrl: './mosaic.component.html',\n  styleUrls: ['./mosaic.component.scss']\n})\nexport class MosaicComponent implements OnInit {\n  @Input() cubes: Tile[];\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/app/mosaic/mosaic/mosaic.component.ts	(revision d31a8fc0a0a15189381907653e43f993d250e6db)
+++ src/app/mosaic/mosaic/mosaic.component.ts	(date 1615148352008)
@@ -1,4 +1,4 @@
-import {Component, Input, OnInit} from '@angular/core';
+import {Component, EventEmitter, Input, OnInit, Output} from '@angular/core';
 import {Tile} from '../types/tile';
 
 @Component({
@@ -7,11 +7,27 @@
   styleUrls: ['./mosaic.component.scss']
 })
 export class MosaicComponent implements OnInit {
-  @Input() cubes: Tile[];
+  @Input() tiles: Tile[];
+  @Output() tilesChange = new EventEmitter<Tile[]>();
 
   constructor() { }
 
   ngOnInit(): void {
   }
 
+  public move(tile, x, y) {
+    const newTiles = [...this.tiles];
+    const index = newTiles.indexOf(tile);
+    newTiles[index] = {
+      ...tile,
+      x: x ?? tile.x,
+      y: y ?? tile.y
+    };
+    this.tilesChange.next(newTiles);
+    // this.tiles = newTiles;
+  }
+
+  trackByIndex(index) {
+    return index;
+  }
 }
Index: src/app/mosaic/mosaic/mosaic.component.html
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><app-box\n  *ngFor=\"let cube of cubes\"\n  [color]=\"cube.color\"\n  [x]=\"cube.x\"\n  [y]=\"cube.y\"\n></app-box>\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/app/mosaic/mosaic/mosaic.component.html	(revision d31a8fc0a0a15189381907653e43f993d250e6db)
+++ src/app/mosaic/mosaic/mosaic.component.html	(date 1615148201706)
@@ -1,6 +1,8 @@
 <app-box
-  *ngFor="let cube of cubes"
+  *ngFor="let cube of tiles; trackBy: trackByIndex"
   [color]="cube.color"
   [x]="cube.x"
   [y]="cube.y"
+  (xChange)="move(cube, $event, null)"
+  (yChange)="move(cube, null, $event)"
 ></app-box>
